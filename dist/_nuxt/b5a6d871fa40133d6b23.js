(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{475:function(e,t){e.exports={body:"Hi there, this is my first post here... or anywhere since I've never blogged before!  This is a journey of mine to implement a functionl blog using markdown with all nuxt features. \n\n### Beginning of the journey\n\n\nAs a totally green web developer, I started this website with the tools I already knew, so I cobbled together a single `index.html` webpage and tried some new toys that have come a long way since I last went in and written something from scratch. \n\n\n### Enter NuxtJS\n\nBeing brand new to all these new fancy Javascript frameworks I spent an absurd amount of time just by trying them out and experimenting with them, not counting the time spent just to get the hang of some obscure JS concepts.\n\nThen... it finally clicked when I found about [NuxtJS](https://nuxtjs.org/).\n\nThis will be a summary of the things I had to do in order to make this website and blog work the way I wanted: static website, markdown blog posts and freely hosted (this time on [Netlify](https://netlify.com/))\n\n### Creating a NuxtJS website\n\nInitializing a new NuxtJS website is as easy as running a single command\n\n```bash\n# Run the create-nuxt-app without having to install it beforehand\nnpx create-nuxt-app my-markdown-blog\n```\n\nI set the `Nuxt mode` to `Universal` to reap the rewards of server side rendered Vue out of the box.\n\nI wanted to replace my old website with this new (only under the hood) version, so I had to bring over the old source code, slapping the content of `index.html` in the `<template>` tag in `pages/index.vue`\n\n### Loading Bulma\n\nHow the heck do I load Bulma here? Probably my solution isn't the cleanest or most elegant, but here it is:\n\n```bash\nnpm install --save-dev bulma @nuxtjs/style-resources node-sass sass-loader\n```\n\nI had also some customisations over the stock Bulma framework so, in order to make it work, I copied over my `main.scss` in the `assets/` directory and changed a couple of things in `nuxt.config.js`:\n\n```javascript\nmodule.exports = {\n  [...]\n  css: [\"assets/main.scss\"] // This line instructs Nuxt to load this file in every page\n  [...]\n  modules: [\n    \"@nuxtjs/axios\", // This was already present because I chose it during the init\n    \"@nuxtjs/style-resources\" // Necessary to make Nuxt load the SCSS and SASS files\n  ]\n  [...]\n}\n```\n1. the main. \n2. efefe. dcwece.\n3. vdrvrv\n\n>>the best thing\n\n<img src=\"~~assets/blog/1.jpg\">\n\nAfter setting the correct path of the `bulma.sass` file in my `main.scss` all the styles fixed themselves. Yay! Success! (After hours of trial and error)\n\n### Refactoring website header and footer in components\n\nTo take advantage of the intrinsic modularisation of Nuxt, I split the navbar and the footer in separate components, so I could use them in the default layout for the pages.\n\nAfter this, my `layouts/default.vue` file looks like this:\n\n```html\n<template>\n  <div class=\"main\">\n    <NavBar />\n    <nuxt />\n    <SiteFooter />\n  </div>\n</template>\n\n<script>\nimport NavBar from '~/components/NavBar';\nimport SiteFooter from '~/components/SiteFooter';\n\nexport default {\n  components:{\n    NavBar,\n    SiteFooter\n  }\n}\n<\/script>\n```\n\n### Adding Markdown support\n\nThis has been a major pain point since I tried it the first time. The following is the way that I managed to set it up. If someone wants to show me the 'real' way, please make a PR to correct this article or my source, I'd be happy to learn about it.\n\nSome preparations...\n\n```bash\nnpm install --save-dev frontmatter-markdown-loader @nuxtjs/markdownit\n```\n\nLet's impart Webpack to read the Markdown files using the `raw-loader` in order to avoid any manipulation of the output.\n\n```javascript\nmodule.exports = {\n  [...]\n  build: {\n    extend(config, ctx) {\n      config.module.rules.push({\n        test: /\\.md$/,\n        use: ['raw-loader']\n      });\n    }\n  }\n  [...]\n}\n```\n\n### Separating Markdown content and metadata\n\nIn the `pages/blog/_post/index.vue` file is where the magic happens (at least for me). Given the fact that `markdownit` doesn't support reading the markdown metadata, where the article info is stored, we need to decouple the process of getting the content and the attributes (as are called by front-matter):\n\n```html\n<script>\n// Let's require the needed modules\nconst fm = require(\"front-matter\");\nvar md = require(\"markdown-it\")({\n  html: true,\n  typographer: true\n});\n\nexport default {\n  async asyncData({ params }) {\n    // We read the markdown file by looking at the `post` parameter\n    // in the URL and searching for a markdown file with that name in\n    // the articles directory\n    const fileContent = await import(`~/articles/${params.post}.md`);\n    // We process the raw output through front-matter\n    // (markdownit was giving me garbled results)\n    let res = fm(fileContent.default);\n    return {\n      // attributes will be an object containing the markdown metadata\n      attributes: res.attributes,\n      // content will contain the body of the markdown file,\n      // rendered in HTML via the `markdownit` class\n      content: md.render(res.body)\n    };\n  }\n};\n<\/script>\n```\n\nWith this data filled up, we can populate some elements:\n\n```html\n<template>\n  <div :key=\"$route.params.post\">\n    <div class=\"container\">\n      <div class=\"columns is-centered\">\n        <div class=\"blog column is-10-tablet\">\n          <div class=\"title\">{{ attributes.title }}</div>\n          <div class=\"subtitle\">\n            Published on {{attributes.ctime}}\n            by {{ attributes.author }}\n          </div>\n          <div v-html=\"content\" class=\"blog-content content\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n```\n\nRight now, if you navigate to the path `blog/some-markdown-file` you should see the content and attributes displayed.\n\n### Generating the routes for the blog posts\n\nWe are one step closer to having a statically generated blog powered by markdown but, before deploying, we have to make one extra step.\n\nNuxt, by default, generates only the routes found in the `pages/` directory, but it doesn't generate every dynamic page, only the index. So we have to find  a way to make it generate also the routes like:\n\n- `blog/first-post` based on the file `articles/first-post.md`\n- `blog/second-post` based on the file `articles/second-post.md`\n- And so on\n\nLet's dive in the `nuxt.config.js` once again. At the top I've configured it this way\n\n```javascript\n// glob is a small module to read 'globs', useful to get\n// a filtered file list\nconst glob = require('glob');\n// we acquire an array containing the filenames\n// in the articles directory\nlet files = glob.sync( '**/*.md' , { cwd: 'articles' });\n\n// We define a function to trim the '.md' from the filename\n// and return the correct path.\n// This function will be used later\nfunction getSlugs(post, _) {\n  let slug = post.substr(0, post.lastIndexOf('.'));\n  return `/blog/${slug}`;\n}\n```\n\nThen, edit the `generate` object in `nuxt.config.js` to add the routes obtained via the previous piece of code:\n\n```javascript\nmodule.exports = {\n  [...]\n  generate: {\n    routes: function() {\n      return files.map(getSlugs)\n    }\n  }\n  [...]\n};\n```\n\n### Wrapping up\n\nIf I didn't forget anything, you should have at least a resemblance of a Markdown blog post viewer and you should be able to succesfully build all the pages and deploying your blog to your favourite static site hosting service.\n\nThe command `npm run generate` will get us the `build` directory containing our fresh statically generated website.\n\nFrom this guide, and from my website, are missing **crucial** parts that I'm going to implement, like using Vuex to store all the blog posts metadata and using that info to render a list of articles. Right now I can only write single blog posts and link them somewhere. Expect an update or a new post about those also!\n\nThanks for reading!",html:"<p>Hi there, this is my first post here... or anywhere since I've never blogged before!  This is a journey of mine to implement a functionl blog using markdown with all nuxt features.</p>\n<h3>Beginning of the journey</h3>\n<p>As a totally green web developer, I started this website with the tools I already knew, so I cobbled together a single <code>index.html</code> webpage and tried some new toys that have come a long way since I last went in and written something from scratch.</p>\n<h3>Enter NuxtJS</h3>\n<p>Being brand new to all these new fancy Javascript frameworks I spent an absurd amount of time just by trying them out and experimenting with them, not counting the time spent just to get the hang of some obscure JS concepts.</p>\n<p>Then... it finally clicked when I found about <a href=\"https://nuxtjs.org/\">NuxtJS</a>.</p>\n<p>This will be a summary of the things I had to do in order to make this website and blog work the way I wanted: static website, markdown blog posts and freely hosted (this time on <a href=\"https://netlify.com/\">Netlify</a>)</p>\n<h3>Creating a NuxtJS website</h3>\n<p>Initializing a new NuxtJS website is as easy as running a single command</p>\n<pre><code class=\"language-bash\"># Run the create-nuxt-app without having to install it beforehand\nnpx create-nuxt-app my-markdown-blog\n</code></pre>\n<p>I set the <code>Nuxt mode</code> to <code>Universal</code> to reap the rewards of server side rendered Vue out of the box.</p>\n<p>I wanted to replace my old website with this new (only under the hood) version, so I had to bring over the old source code, slapping the content of <code>index.html</code> in the <code>&lt;template&gt;</code> tag in <code>pages/index.vue</code></p>\n<h3>Loading Bulma</h3>\n<p>How the heck do I load Bulma here? Probably my solution isn't the cleanest or most elegant, but here it is:</p>\n<pre><code class=\"language-bash\">npm install --save-dev bulma @nuxtjs/style-resources node-sass sass-loader\n</code></pre>\n<p>I had also some customisations over the stock Bulma framework so, in order to make it work, I copied over my <code>main.scss</code> in the <code>assets/</code> directory and changed a couple of things in <code>nuxt.config.js</code>:</p>\n<pre><code class=\"language-javascript\">module.exports = {\n  [...]\n  css: [&quot;assets/main.scss&quot;] // This line instructs Nuxt to load this file in every page\n  [...]\n  modules: [\n    &quot;@nuxtjs/axios&quot;, // This was already present because I chose it during the init\n    &quot;@nuxtjs/style-resources&quot; // Necessary to make Nuxt load the SCSS and SASS files\n  ]\n  [...]\n}\n</code></pre>\n<ol>\n<li>the main.</li>\n<li>efefe. dcwece.</li>\n<li>vdrvrv</li>\n</ol>\n<blockquote>\n<blockquote>\n<p>the best thing</p>\n</blockquote>\n</blockquote>\n<img src=\"~~assets/blog/1.jpg\">\n<p>After setting the correct path of the <code>bulma.sass</code> file in my <code>main.scss</code> all the styles fixed themselves. Yay! Success! (After hours of trial and error)</p>\n<h3>Refactoring website header and footer in components</h3>\n<p>To take advantage of the intrinsic modularisation of Nuxt, I split the navbar and the footer in separate components, so I could use them in the default layout for the pages.</p>\n<p>After this, my <code>layouts/default.vue</code> file looks like this:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div class=&quot;main&quot;&gt;\n    &lt;NavBar /&gt;\n    &lt;nuxt /&gt;\n    &lt;SiteFooter /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport NavBar from '~/components/NavBar';\nimport SiteFooter from '~/components/SiteFooter';\n\nexport default {\n  components:{\n    NavBar,\n    SiteFooter\n  }\n}\n&lt;/script&gt;\n</code></pre>\n<h3>Adding Markdown support</h3>\n<p>This has been a major pain point since I tried it the first time. The following is the way that I managed to set it up. If someone wants to show me the 'real' way, please make a PR to correct this article or my source, I'd be happy to learn about it.</p>\n<p>Some preparations...</p>\n<pre><code class=\"language-bash\">npm install --save-dev frontmatter-markdown-loader @nuxtjs/markdownit\n</code></pre>\n<p>Let's impart Webpack to read the Markdown files using the <code>raw-loader</code> in order to avoid any manipulation of the output.</p>\n<pre><code class=\"language-javascript\">module.exports = {\n  [...]\n  build: {\n    extend(config, ctx) {\n      config.module.rules.push({\n        test: /\\.md$/,\n        use: ['raw-loader']\n      });\n    }\n  }\n  [...]\n}\n</code></pre>\n<h3>Separating Markdown content and metadata</h3>\n<p>In the <code>pages/blog/_post/index.vue</code> file is where the magic happens (at least for me). Given the fact that <code>markdownit</code> doesn't support reading the markdown metadata, where the article info is stored, we need to decouple the process of getting the content and the attributes (as are called by front-matter):</p>\n<pre><code class=\"language-html\">&lt;script&gt;\n// Let's require the needed modules\nconst fm = require(&quot;front-matter&quot;);\nvar md = require(&quot;markdown-it&quot;)({\n  html: true,\n  typographer: true\n});\n\nexport default {\n  async asyncData({ params }) {\n    // We read the markdown file by looking at the `post` parameter\n    // in the URL and searching for a markdown file with that name in\n    // the articles directory\n    const fileContent = await import(`~/articles/${params.post}.md`);\n    // We process the raw output through front-matter\n    // (markdownit was giving me garbled results)\n    let res = fm(fileContent.default);\n    return {\n      // attributes will be an object containing the markdown metadata\n      attributes: res.attributes,\n      // content will contain the body of the markdown file,\n      // rendered in HTML via the `markdownit` class\n      content: md.render(res.body)\n    };\n  }\n};\n&lt;/script&gt;\n</code></pre>\n<p>With this data filled up, we can populate some elements:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div :key=&quot;$route.params.post&quot;&gt;\n    &lt;div class=&quot;container&quot;&gt;\n      &lt;div class=&quot;columns is-centered&quot;&gt;\n        &lt;div class=&quot;blog column is-10-tablet&quot;&gt;\n          &lt;div class=&quot;title&quot;&gt;{{ attributes.title }}&lt;/div&gt;\n          &lt;div class=&quot;subtitle&quot;&gt;\n            Published on {{attributes.ctime}}\n            by {{ attributes.author }}\n          &lt;/div&gt;\n          &lt;div v-html=&quot;content&quot; class=&quot;blog-content content&quot;&gt;&lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n<p>Right now, if you navigate to the path <code>blog/some-markdown-file</code> you should see the content and attributes displayed.</p>\n<h3>Generating the routes for the blog posts</h3>\n<p>We are one step closer to having a statically generated blog powered by markdown but, before deploying, we have to make one extra step.</p>\n<p>Nuxt, by default, generates only the routes found in the <code>pages/</code> directory, but it doesn't generate every dynamic page, only the index. So we have to find  a way to make it generate also the routes like:</p>\n<ul>\n<li><code>blog/first-post</code> based on the file <code>articles/first-post.md</code></li>\n<li><code>blog/second-post</code> based on the file <code>articles/second-post.md</code></li>\n<li>And so on</li>\n</ul>\n<p>Let's dive in the <code>nuxt.config.js</code> once again. At the top I've configured it this way</p>\n<pre><code class=\"language-javascript\">// glob is a small module to read 'globs', useful to get\n// a filtered file list\nconst glob = require('glob');\n// we acquire an array containing the filenames\n// in the articles directory\nlet files = glob.sync( '**/*.md' , { cwd: 'articles' });\n\n// We define a function to trim the '.md' from the filename\n// and return the correct path.\n// This function will be used later\nfunction getSlugs(post, _) {\n  let slug = post.substr(0, post.lastIndexOf('.'));\n  return `/blog/${slug}`;\n}\n</code></pre>\n<p>Then, edit the <code>generate</code> object in <code>nuxt.config.js</code> to add the routes obtained via the previous piece of code:</p>\n<pre><code class=\"language-javascript\">module.exports = {\n  [...]\n  generate: {\n    routes: function() {\n      return files.map(getSlugs)\n    }\n  }\n  [...]\n};\n</code></pre>\n<h3>Wrapping up</h3>\n<p>If I didn't forget anything, you should have at least a resemblance of a Markdown blog post viewer and you should be able to succesfully build all the pages and deploying your blog to your favourite static site hosting service.</p>\n<p>The command <code>npm run generate</code> will get us the <code>build</code> directory containing our fresh statically generated website.</p>\n<p>From this guide, and from my website, are missing <strong>crucial</strong> parts that I'm going to implement, like using Vuex to store all the blog posts metadata and using that info to render a list of articles. Right now I can only write single blog posts and link them somewhere. Expect an update or a new post about those also!</p>\n<p>Thanks for reading!</p>\n",attributes:{name:"Bandersnatch: The Marketing Weapon",title:"Bandersnatch",description:"How Netflix used it's brilliant marketing strategies through a movie game",year:"28 June 2019",color:"#edece7",isTextColorDark:!0,link:"https://medium.com/@raghavaggarwal0089/bandersnatch-the-marketing-weapon-f8eb6020ed04",heroimagedes:"Code ONN",id:"Bandersnatch",github_doclink:"building-my-static-blog-with-nuxtjs-and-markdown-beginner.md",_meta:{resourcePath:"/home/raghav/raghav-website/contents/en/blog/Bandersnatch.md"}},vue:{render:"return function render() { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0) }",staticRenderFns:'return [function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"dynamicMarkdown"},[_c(\'p\',[_vm._v("Hi there, this is my first post here... or anywhere since I\'ve never blogged before!  This is a journey of mine to implement a functionl blog using markdown with all nuxt features.")]),_vm._v(" "),_c(\'h3\',[_vm._v("Beginning of the journey")]),_vm._v(" "),_c(\'p\',[_vm._v("As a totally green web developer, I started this website with the tools I already knew, so I cobbled together a single "),_c(\'code\',{pre:true},[_vm._v("index.html")]),_vm._v(" webpage and tried some new toys that have come a long way since I last went in and written something from scratch.")]),_vm._v(" "),_c(\'h3\',[_vm._v("Enter NuxtJS")]),_vm._v(" "),_c(\'p\',[_vm._v("Being brand new to all these new fancy Javascript frameworks I spent an absurd amount of time just by trying them out and experimenting with them, not counting the time spent just to get the hang of some obscure JS concepts.")]),_vm._v(" "),_c(\'p\',[_vm._v("Then... it finally clicked when I found about "),_c(\'a\',{attrs:{"href":"https://nuxtjs.org/"}},[_vm._v("NuxtJS")]),_vm._v(".")]),_vm._v(" "),_c(\'p\',[_vm._v("This will be a summary of the things I had to do in order to make this website and blog work the way I wanted: static website, markdown blog posts and freely hosted (this time on "),_c(\'a\',{attrs:{"href":"https://netlify.com/"}},[_vm._v("Netlify")]),_vm._v(")")]),_vm._v(" "),_c(\'h3\',[_vm._v("Creating a NuxtJS website")]),_vm._v(" "),_c(\'p\',[_vm._v("Initializing a new NuxtJS website is as easy as running a single command")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-bash"}},[_vm._v("# Run the create-nuxt-app without having to install it beforehand\\nnpx create-nuxt-app my-markdown-blog\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("I set the "),_c(\'code\',{pre:true},[_vm._v("Nuxt mode")]),_vm._v(" to "),_c(\'code\',{pre:true},[_vm._v("Universal")]),_vm._v(" to reap the rewards of server side rendered Vue out of the box.")]),_vm._v(" "),_c(\'p\',[_vm._v("I wanted to replace my old website with this new (only under the hood) version, so I had to bring over the old source code, slapping the content of "),_c(\'code\',{pre:true},[_vm._v("index.html")]),_vm._v(" in the "),_c(\'code\',{pre:true},[_vm._v("<template>")]),_vm._v(" tag in "),_c(\'code\',{pre:true},[_vm._v("pages/index.vue")])]),_vm._v(" "),_c(\'h3\',[_vm._v("Loading Bulma")]),_vm._v(" "),_c(\'p\',[_vm._v("How the heck do I load Bulma here? Probably my solution isn\'t the cleanest or most elegant, but here it is:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-bash"}},[_vm._v("npm install --save-dev bulma @nuxtjs/style-resources node-sass sass-loader\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("I had also some customisations over the stock Bulma framework so, in order to make it work, I copied over my "),_c(\'code\',{pre:true},[_vm._v("main.scss")]),_vm._v(" in the "),_c(\'code\',{pre:true},[_vm._v("assets/")]),_vm._v(" directory and changed a couple of things in "),_c(\'code\',{pre:true},[_vm._v("nuxt.config.js")]),_vm._v(":")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("module.exports = {\\n  [...]\\n  css: [\\"assets/main.scss\\"] // This line instructs Nuxt to load this file in every page\\n  [...]\\n  modules: [\\n    \\"@nuxtjs/axios\\", // This was already present because I chose it during the init\\n    \\"@nuxtjs/style-resources\\" // Necessary to make Nuxt load the SCSS and SASS files\\n  ]\\n  [...]\\n}\\n")])]),_vm._v(" "),_c(\'ol\',[_c(\'li\',[_vm._v("the main.")]),_vm._v(" "),_c(\'li\',[_vm._v("efefe. dcwece.")]),_vm._v(" "),_c(\'li\',[_vm._v("vdrvrv")])]),_vm._v(" "),_c(\'blockquote\',[_c(\'blockquote\',[_c(\'p\',[_vm._v("the best thing")])])]),_vm._v(" "),_c(\'img\',{attrs:{"src":"~~assets/blog/1.jpg"}}),_vm._v(" "),_c(\'p\',[_vm._v("After setting the correct path of the "),_c(\'code\',{pre:true},[_vm._v("bulma.sass")]),_vm._v(" file in my "),_c(\'code\',{pre:true},[_vm._v("main.scss")]),_vm._v(" all the styles fixed themselves. Yay! Success! (After hours of trial and error)")]),_vm._v(" "),_c(\'h3\',[_vm._v("Refactoring website header and footer in components")]),_vm._v(" "),_c(\'p\',[_vm._v("To take advantage of the intrinsic modularisation of Nuxt, I split the navbar and the footer in separate components, so I could use them in the default layout for the pages.")]),_vm._v(" "),_c(\'p\',[_vm._v("After this, my "),_c(\'code\',{pre:true},[_vm._v("layouts/default.vue")]),_vm._v(" file looks like this:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-html"}},[_vm._v("<template>\\n  <div class=\\"main\\">\\n    <NavBar />\\n    <nuxt />\\n    <SiteFooter />\\n  </div>\\n</template>\\n\\n<script>\\nimport NavBar from \'~/components/NavBar\';\\nimport SiteFooter from \'~/components/SiteFooter\';\\n\\nexport default {\\n  components:{\\n    NavBar,\\n    SiteFooter\\n  }\\n}\\n<\/script>\\n")])]),_vm._v(" "),_c(\'h3\',[_vm._v("Adding Markdown support")]),_vm._v(" "),_c(\'p\',[_vm._v("This has been a major pain point since I tried it the first time. The following is the way that I managed to set it up. If someone wants to show me the \'real\' way, please make a PR to correct this article or my source, I\'d be happy to learn about it.")]),_vm._v(" "),_c(\'p\',[_vm._v("Some preparations...")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-bash"}},[_vm._v("npm install --save-dev frontmatter-markdown-loader @nuxtjs/markdownit\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Let\'s impart Webpack to read the Markdown files using the "),_c(\'code\',{pre:true},[_vm._v("raw-loader")]),_vm._v(" in order to avoid any manipulation of the output.")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("module.exports = {\\n  [...]\\n  build: {\\n    extend(config, ctx) {\\n      config.module.rules.push({\\n        test: /\\\\.md$/,\\n        use: [\'raw-loader\']\\n      });\\n    }\\n  }\\n  [...]\\n}\\n")])]),_vm._v(" "),_c(\'h3\',[_vm._v("Separating Markdown content and metadata")]),_vm._v(" "),_c(\'p\',[_vm._v("In the "),_c(\'code\',{pre:true},[_vm._v("pages/blog/_post/index.vue")]),_vm._v(" file is where the magic happens (at least for me). Given the fact that "),_c(\'code\',{pre:true},[_vm._v("markdownit")]),_vm._v(" doesn\'t support reading the markdown metadata, where the article info is stored, we need to decouple the process of getting the content and the attributes (as are called by front-matter):")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-html"}},[_vm._v("<script>\\n// Let\'s require the needed modules\\nconst fm = require(\\"front-matter\\");\\nvar md = require(\\"markdown-it\\")({\\n  html: true,\\n  typographer: true\\n});\\n\\nexport default {\\n  async asyncData({ params }) {\\n    // We read the markdown file by looking at the `post` parameter\\n    // in the URL and searching for a markdown file with that name in\\n    // the articles directory\\n    const fileContent = await import(`~/articles/${params.post}.md`);\\n    // We process the raw output through front-matter\\n    // (markdownit was giving me garbled results)\\n    let res = fm(fileContent.default);\\n    return {\\n      // attributes will be an object containing the markdown metadata\\n      attributes: res.attributes,\\n      // content will contain the body of the markdown file,\\n      // rendered in HTML via the `markdownit` class\\n      content: md.render(res.body)\\n    };\\n  }\\n};\\n<\/script>\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("With this data filled up, we can populate some elements:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-html"}},[_vm._v("<template>\\n  <div :key=\\"$route.params.post\\">\\n    <div class=\\"container\\">\\n      <div class=\\"columns is-centered\\">\\n        <div class=\\"blog column is-10-tablet\\">\\n          <div class=\\"title\\">{{ attributes.title }}</div>\\n          <div class=\\"subtitle\\">\\n            Published on {{attributes.ctime}}\\n            by {{ attributes.author }}\\n          </div>\\n          <div v-html=\\"content\\" class=\\"blog-content content\\"></div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</template>\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Right now, if you navigate to the path "),_c(\'code\',{pre:true},[_vm._v("blog/some-markdown-file")]),_vm._v(" you should see the content and attributes displayed.")]),_vm._v(" "),_c(\'h3\',[_vm._v("Generating the routes for the blog posts")]),_vm._v(" "),_c(\'p\',[_vm._v("We are one step closer to having a statically generated blog powered by markdown but, before deploying, we have to make one extra step.")]),_vm._v(" "),_c(\'p\',[_vm._v("Nuxt, by default, generates only the routes found in the "),_c(\'code\',{pre:true},[_vm._v("pages/")]),_vm._v(" directory, but it doesn\'t generate every dynamic page, only the index. So we have to find  a way to make it generate also the routes like:")]),_vm._v(" "),_c(\'ul\',[_c(\'li\',[_c(\'code\',{pre:true},[_vm._v("blog/first-post")]),_vm._v(" based on the file "),_c(\'code\',{pre:true},[_vm._v("articles/first-post.md")])]),_vm._v(" "),_c(\'li\',[_c(\'code\',{pre:true},[_vm._v("blog/second-post")]),_vm._v(" based on the file "),_c(\'code\',{pre:true},[_vm._v("articles/second-post.md")])]),_vm._v(" "),_c(\'li\',[_vm._v("And so on")])]),_vm._v(" "),_c(\'p\',[_vm._v("Let\'s dive in the "),_c(\'code\',{pre:true},[_vm._v("nuxt.config.js")]),_vm._v(" once again. At the top I\'ve configured it this way")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("// glob is a small module to read \'globs\', useful to get\\n// a filtered file list\\nconst glob = require(\'glob\');\\n// we acquire an array containing the filenames\\n// in the articles directory\\nlet files = glob.sync( \'**/*.md\' , { cwd: \'articles\' });\\n\\n// We define a function to trim the \'.md\' from the filename\\n// and return the correct path.\\n// This function will be used later\\nfunction getSlugs(post, _) {\\n  let slug = post.substr(0, post.lastIndexOf(\'.\'));\\n  return `/blog/${slug}`;\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Then, edit the "),_c(\'code\',{pre:true},[_vm._v("generate")]),_vm._v(" object in "),_c(\'code\',{pre:true},[_vm._v("nuxt.config.js")]),_vm._v(" to add the routes obtained via the previous piece of code:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("module.exports = {\\n  [...]\\n  generate: {\\n    routes: function() {\\n      return files.map(getSlugs)\\n    }\\n  }\\n  [...]\\n};\\n")])]),_vm._v(" "),_c(\'h3\',[_vm._v("Wrapping up")]),_vm._v(" "),_c(\'p\',[_vm._v("If I didn\'t forget anything, you should have at least a resemblance of a Markdown blog post viewer and you should be able to succesfully build all the pages and deploying your blog to your favourite static site hosting service.")]),_vm._v(" "),_c(\'p\',[_vm._v("The command "),_c(\'code\',{pre:true},[_vm._v("npm run generate")]),_vm._v(" will get us the "),_c(\'code\',{pre:true},[_vm._v("build")]),_vm._v(" directory containing our fresh statically generated website.")]),_vm._v(" "),_c(\'p\',[_vm._v("From this guide, and from my website, are missing "),_c(\'strong\',[_vm._v("crucial")]),_vm._v(" parts that I\'m going to implement, like using Vuex to store all the blog posts metadata and using that info to render a list of articles. Right now I can only write single blog posts and link them somewhere. Expect an update or a new post about those also!")]),_vm._v(" "),_c(\'p\',[_vm._v("Thanks for reading!")])]) }]',component:{data:function(){return{templateRender:null}},render:function(e){return this.templateRender?this.templateRender():e("div","Rendering")},created:function(){this.templateRender=function(){var e=this.$createElement;this._self._c;return this._m(0)},this.$options.staticRenderFns=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"dynamicMarkdown"},[n("p",[e._v("Hi there, this is my first post here... or anywhere since I've never blogged before!  This is a journey of mine to implement a functionl blog using markdown with all nuxt features.")]),e._v(" "),n("h3",[e._v("Beginning of the journey")]),e._v(" "),n("p",[e._v("As a totally green web developer, I started this website with the tools I already knew, so I cobbled together a single "),n("code",{pre:!0},[e._v("index.html")]),e._v(" webpage and tried some new toys that have come a long way since I last went in and written something from scratch.")]),e._v(" "),n("h3",[e._v("Enter NuxtJS")]),e._v(" "),n("p",[e._v("Being brand new to all these new fancy Javascript frameworks I spent an absurd amount of time just by trying them out and experimenting with them, not counting the time spent just to get the hang of some obscure JS concepts.")]),e._v(" "),n("p",[e._v("Then... it finally clicked when I found about "),n("a",{attrs:{href:"https://nuxtjs.org/"}},[e._v("NuxtJS")]),e._v(".")]),e._v(" "),n("p",[e._v("This will be a summary of the things I had to do in order to make this website and blog work the way I wanted: static website, markdown blog posts and freely hosted (this time on "),n("a",{attrs:{href:"https://netlify.com/"}},[e._v("Netlify")]),e._v(")")]),e._v(" "),n("h3",[e._v("Creating a NuxtJS website")]),e._v(" "),n("p",[e._v("Initializing a new NuxtJS website is as easy as running a single command")]),e._v(" "),n("pre",[n("code",{pre:!0,attrs:{class:"language-bash"}},[e._v("# Run the create-nuxt-app without having to install it beforehand\nnpx create-nuxt-app my-markdown-blog\n")])]),e._v(" "),n("p",[e._v("I set the "),n("code",{pre:!0},[e._v("Nuxt mode")]),e._v(" to "),n("code",{pre:!0},[e._v("Universal")]),e._v(" to reap the rewards of server side rendered Vue out of the box.")]),e._v(" "),n("p",[e._v("I wanted to replace my old website with this new (only under the hood) version, so I had to bring over the old source code, slapping the content of "),n("code",{pre:!0},[e._v("index.html")]),e._v(" in the "),n("code",{pre:!0},[e._v("<template>")]),e._v(" tag in "),n("code",{pre:!0},[e._v("pages/index.vue")])]),e._v(" "),n("h3",[e._v("Loading Bulma")]),e._v(" "),n("p",[e._v("How the heck do I load Bulma here? Probably my solution isn't the cleanest or most elegant, but here it is:")]),e._v(" "),n("pre",[n("code",{pre:!0,attrs:{class:"language-bash"}},[e._v("npm install --save-dev bulma @nuxtjs/style-resources node-sass sass-loader\n")])]),e._v(" "),n("p",[e._v("I had also some customisations over the stock Bulma framework so, in order to make it work, I copied over my "),n("code",{pre:!0},[e._v("main.scss")]),e._v(" in the "),n("code",{pre:!0},[e._v("assets/")]),e._v(" directory and changed a couple of things in "),n("code",{pre:!0},[e._v("nuxt.config.js")]),e._v(":")]),e._v(" "),n("pre",[n("code",{pre:!0,attrs:{class:"language-javascript"}},[e._v('module.exports = {\n  [...]\n  css: ["assets/main.scss"] // This line instructs Nuxt to load this file in every page\n  [...]\n  modules: [\n    "@nuxtjs/axios", // This was already present because I chose it during the init\n    "@nuxtjs/style-resources" // Necessary to make Nuxt load the SCSS and SASS files\n  ]\n  [...]\n}\n')])]),e._v(" "),n("ol",[n("li",[e._v("the main.")]),e._v(" "),n("li",[e._v("efefe. dcwece.")]),e._v(" "),n("li",[e._v("vdrvrv")])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("the best thing")])])]),e._v(" "),n("img",{attrs:{src:"~~assets/blog/1.jpg"}}),e._v(" "),n("p",[e._v("After setting the correct path of the "),n("code",{pre:!0},[e._v("bulma.sass")]),e._v(" file in my "),n("code",{pre:!0},[e._v("main.scss")]),e._v(" all the styles fixed themselves. Yay! Success! (After hours of trial and error)")]),e._v(" "),n("h3",[e._v("Refactoring website header and footer in components")]),e._v(" "),n("p",[e._v("To take advantage of the intrinsic modularisation of Nuxt, I split the navbar and the footer in separate components, so I could use them in the default layout for the pages.")]),e._v(" "),n("p",[e._v("After this, my "),n("code",{pre:!0},[e._v("layouts/default.vue")]),e._v(" file looks like this:")]),e._v(" "),n("pre",[n("code",{pre:!0,attrs:{class:"language-html"}},[e._v("<template>\n  <div class=\"main\">\n    <NavBar />\n    <nuxt />\n    <SiteFooter />\n  </div>\n</template>\n\n<script>\nimport NavBar from '~/components/NavBar';\nimport SiteFooter from '~/components/SiteFooter';\n\nexport default {\n  components:{\n    NavBar,\n    SiteFooter\n  }\n}\n<\/script>\n")])]),e._v(" "),n("h3",[e._v("Adding Markdown support")]),e._v(" "),n("p",[e._v("This has been a major pain point since I tried it the first time. The following is the way that I managed to set it up. If someone wants to show me the 'real' way, please make a PR to correct this article or my source, I'd be happy to learn about it.")]),e._v(" "),n("p",[e._v("Some preparations...")]),e._v(" "),n("pre",[n("code",{pre:!0,attrs:{class:"language-bash"}},[e._v("npm install --save-dev frontmatter-markdown-loader @nuxtjs/markdownit\n")])]),e._v(" "),n("p",[e._v("Let's impart Webpack to read the Markdown files using the "),n("code",{pre:!0},[e._v("raw-loader")]),e._v(" in order to avoid any manipulation of the output.")]),e._v(" "),n("pre",[n("code",{pre:!0,attrs:{class:"language-javascript"}},[e._v("module.exports = {\n  [...]\n  build: {\n    extend(config, ctx) {\n      config.module.rules.push({\n        test: /\\.md$/,\n        use: ['raw-loader']\n      });\n    }\n  }\n  [...]\n}\n")])]),e._v(" "),n("h3",[e._v("Separating Markdown content and metadata")]),e._v(" "),n("p",[e._v("In the "),n("code",{pre:!0},[e._v("pages/blog/_post/index.vue")]),e._v(" file is where the magic happens (at least for me). Given the fact that "),n("code",{pre:!0},[e._v("markdownit")]),e._v(" doesn't support reading the markdown metadata, where the article info is stored, we need to decouple the process of getting the content and the attributes (as are called by front-matter):")]),e._v(" "),n("pre",[n("code",{pre:!0,attrs:{class:"language-html"}},[e._v('<script>\n// Let\'s require the needed modules\nconst fm = require("front-matter");\nvar md = require("markdown-it")({\n  html: true,\n  typographer: true\n});\n\nexport default {\n  async asyncData({ params }) {\n    // We read the markdown file by looking at the `post` parameter\n    // in the URL and searching for a markdown file with that name in\n    // the articles directory\n    const fileContent = await import(`~/articles/${params.post}.md`);\n    // We process the raw output through front-matter\n    // (markdownit was giving me garbled results)\n    let res = fm(fileContent.default);\n    return {\n      // attributes will be an object containing the markdown metadata\n      attributes: res.attributes,\n      // content will contain the body of the markdown file,\n      // rendered in HTML via the `markdownit` class\n      content: md.render(res.body)\n    };\n  }\n};\n<\/script>\n')])]),e._v(" "),n("p",[e._v("With this data filled up, we can populate some elements:")]),e._v(" "),n("pre",[n("code",{pre:!0,attrs:{class:"language-html"}},[e._v('<template>\n  <div :key="$route.params.post">\n    <div class="container">\n      <div class="columns is-centered">\n        <div class="blog column is-10-tablet">\n          <div class="title">{{ attributes.title }}</div>\n          <div class="subtitle">\n            Published on {{attributes.ctime}}\n            by {{ attributes.author }}\n          </div>\n          <div v-html="content" class="blog-content content"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n')])]),e._v(" "),n("p",[e._v("Right now, if you navigate to the path "),n("code",{pre:!0},[e._v("blog/some-markdown-file")]),e._v(" you should see the content and attributes displayed.")]),e._v(" "),n("h3",[e._v("Generating the routes for the blog posts")]),e._v(" "),n("p",[e._v("We are one step closer to having a statically generated blog powered by markdown but, before deploying, we have to make one extra step.")]),e._v(" "),n("p",[e._v("Nuxt, by default, generates only the routes found in the "),n("code",{pre:!0},[e._v("pages/")]),e._v(" directory, but it doesn't generate every dynamic page, only the index. So we have to find  a way to make it generate also the routes like:")]),e._v(" "),n("ul",[n("li",[n("code",{pre:!0},[e._v("blog/first-post")]),e._v(" based on the file "),n("code",{pre:!0},[e._v("articles/first-post.md")])]),e._v(" "),n("li",[n("code",{pre:!0},[e._v("blog/second-post")]),e._v(" based on the file "),n("code",{pre:!0},[e._v("articles/second-post.md")])]),e._v(" "),n("li",[e._v("And so on")])]),e._v(" "),n("p",[e._v("Let's dive in the "),n("code",{pre:!0},[e._v("nuxt.config.js")]),e._v(" once again. At the top I've configured it this way")]),e._v(" "),n("pre",[n("code",{pre:!0,attrs:{class:"language-javascript"}},[e._v("// glob is a small module to read 'globs', useful to get\n// a filtered file list\nconst glob = require('glob');\n// we acquire an array containing the filenames\n// in the articles directory\nlet files = glob.sync( '**/*.md' , { cwd: 'articles' });\n\n// We define a function to trim the '.md' from the filename\n// and return the correct path.\n// This function will be used later\nfunction getSlugs(post, _) {\n  let slug = post.substr(0, post.lastIndexOf('.'));\n  return `/blog/${slug}`;\n}\n")])]),e._v(" "),n("p",[e._v("Then, edit the "),n("code",{pre:!0},[e._v("generate")]),e._v(" object in "),n("code",{pre:!0},[e._v("nuxt.config.js")]),e._v(" to add the routes obtained via the previous piece of code:")]),e._v(" "),n("pre",[n("code",{pre:!0,attrs:{class:"language-javascript"}},[e._v("module.exports = {\n  [...]\n  generate: {\n    routes: function() {\n      return files.map(getSlugs)\n    }\n  }\n  [...]\n};\n")])]),e._v(" "),n("h3",[e._v("Wrapping up")]),e._v(" "),n("p",[e._v("If I didn't forget anything, you should have at least a resemblance of a Markdown blog post viewer and you should be able to succesfully build all the pages and deploying your blog to your favourite static site hosting service.")]),e._v(" "),n("p",[e._v("The command "),n("code",{pre:!0},[e._v("npm run generate")]),e._v(" will get us the "),n("code",{pre:!0},[e._v("build")]),e._v(" directory containing our fresh statically generated website.")]),e._v(" "),n("p",[e._v("From this guide, and from my website, are missing "),n("strong",[e._v("crucial")]),e._v(" parts that I'm going to implement, like using Vuex to store all the blog posts metadata and using that info to render a list of articles. Right now I can only write single blog posts and link them somewhere. Expect an update or a new post about those also!")]),e._v(" "),n("p",[e._v("Thanks for reading!")])])}]}}}}}}]);